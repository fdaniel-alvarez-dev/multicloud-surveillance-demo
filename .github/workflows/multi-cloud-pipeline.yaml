name: multi-cloud-pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  GCP_PROJECT_ID: arlo-resilience-prod
  IMAGE_NAME: arlo-demo-app
  IMAGE_VERSION: ${{ github.sha }}

permissions:
  contents: read
  id-token: write
  packages: write

jobs:
  atlantis-plan:
    if: ${{ github.event_name == 'pull_request' && secrets.ATLANTIS_URL != '' && secrets.ATLANTIS_TOKEN != '' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Trigger Atlantis plan
        env:
          ATLANTIS_URL: ${{ secrets.ATLANTIS_URL }}
          ATLANTIS_TOKEN: ${{ secrets.ATLANTIS_TOKEN }}
        run: |
          payload=$(jq -n \
            --arg repo "${{ github.repository }}" \
            --arg sha "${{ github.sha }}" \
            --arg pr "${{ github.event.pull_request.number }}" \
            '{ repository: $repo, sha: $sha, pull_request: $pr }')
          curl -sS -X POST \
            -H "Authorization: Bearer ${ATLANTIS_TOKEN}" \
            -H "Content-Type: application/json" \
            -d "${payload}" \
            "${ATLANTIS_URL}/events/github"

  build-and-push:
    runs-on: ubuntu-latest
    needs: []
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Authenticate to Google Artifact Registry
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_BUILD_SERVICE_ACCOUNT }}
      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker us-central1-docker.pkg.dev --quiet
      - name: Build container image
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --tag "${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_VERSION }}" \
            --tag "us-central1-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/containers/${{ env.IMAGE_NAME }}:${{ env.IMAGE_VERSION }}" \
            --file Dockerfile \
            --push .
      - name: Install yq
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/download/v4.43.1/yq_linux_amd64 -O /usr/local/bin/yq
          sudo chmod +x /usr/local/bin/yq
      - name: Update Kustomize image tag
        run: |
          yq -i '.images[0].newTag = "${{ env.IMAGE_VERSION }}"' kubernetes/overlays/aws/kustomization.yaml
          yq -i '.images[0].newTag = "${{ env.IMAGE_VERSION }}"' kubernetes/overlays/gcp/kustomization.yaml
      - name: Commit manifest updates
        if: github.event_name == 'push'
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add kubernetes/overlays/*/kustomization.yaml
          git commit -m "chore: update image tag to ${{ env.IMAGE_VERSION }}"
          git push
      - name: Sync Argo CD
        env:
          ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
          ARGOCD_AUTH_TOKEN: ${{ secrets.ARGOCD_AUTH_TOKEN }}
        run: |
          curl -sS -X POST \
            -H "Authorization: Bearer ${ARGOCD_AUTH_TOKEN}" \
            -H "Content-Type: application/json" \
            -d '{"project":"default"}' \
            "${ARGOCD_SERVER}/api/v1/applications/argo-sync"

  smoke-tests:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Run smoke tests
        run: |
          ./tests/smoke.sh "api.arlo-resilience.com"
